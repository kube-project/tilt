apiVersion: v1
data:
  database_setup.sql: |
    --
    -- Create main database
    --
    -- create database kube;
    -- This will be created by an environment property to the kube.

    --
    -- Use main database
    --
    use kube;

    --
    -- Table for images that are stored
    --
    create table images(
        id int not null auto_increment primary key,
        path varchar(255) not null,
        person int,
        status int
    );

    --
    -- Person table which stores known people
    --
    create table person(
        id int not null auto_increment primary key,
        name varchar(255) not null
    );

    --
    -- Person images are images associated with known people
    --
    create table person_images(
        id int not null auto_increment primary key,
        image_name varchar(255),
        person_id int
    );

    --
    -- Priming the known people table with some data
    --
    insert into person (name) values('Hannibal');
    insert into person (name) values('Skarlso');
    insert into person (name) values('John Doe');
    insert into person (name) values('Gergely');

    --
    -- Priming known people images table with some data
    --
    insert into person_images (image_name, person_id) values ('hannibal_1.jpg', 1);
    insert into person_images (image_name, person_id) values ('hannibal_2.jpg', 1);
    insert into person_images (image_name, person_id) values ('skarlso_1.jpg', 2);
    insert into person_images (image_name, person_id) values ('skarlso_2.jpg', 2);
    insert into person_images (image_name, person_id) values ('john_doe_1.jpg', 3);
    insert into person_images (image_name, person_id) values ('gergely_01.jpg', 4);
kind: ConfigMap
metadata:
  name: db-bootstrap
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: nsqlookup
spec:
  ports:
  - name: main
    protocol: TCP
    port: 4160
    targetPort: 4160
  - name: secondary
    protocol: TCP
    port: 4161
    targetPort: 4161
  selector:
    app: nsqlookup
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nsqlookup
spec:
  selector:
    matchLabels:
      app: nsqlookup
  replicas: 1
  template:
    metadata:
      labels:
        app: nsqlookup
    spec:
      containers:
      - name: nsqlookup
        image: nsqio/nsq
        imagePullPolicy: Always
        command: ["/nsqlookupd"]
        args: ["--broadcast-address=nsqlookup.default.svc.cluster.local"]
        ports:
        - containerPort: 4160
          hostPort: 4160
        - containerPort: 4161
          hostPort: 4161
        resources:
          limits:
            cpu: "500m"
            memory: "500Mi"
          requests:
            cpu: "300m"
            memory: "500Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:8.0
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kube-face-secret
              key: mysql_password
        - name: MYSQL_DATABASE
          value: kube
        ports:
        - containerPort: 3306
          hostPort: 3306
          name: mysql
        - containerPort: 33060
          hostPort: 33060
          name: mysqlx
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: bootstrap-script
          mountPath: /docker-entrypoint-initdb.d/database_setup.sql
          subPath: database_setup.sql
        resources:
          limits:
            cpu: "500m"
            memory: "750Mi"
          requests:
            cpu: "300m"
            memory: "750Mi"
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
      - name: bootstrap-script
        configMap:
          name: db-bootstrap
---
apiVersion: v1
kind: Service
metadata:
  name: nsqd-srv
  labels:
    app: nsqd
spec:
  ports:
  - name: main
    protocol: TCP
    port: 4150
    targetPort: 4150
  - name: secondary
    protocol: TCP
    port: 4151
    targetPort: 4151
  selector:
    app: nsqd
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nsqd
spec:
  selector:
    matchLabels:
      app: nsqd
  serviceName: "nsqd-srv"
  replicas: 1
  template:
    metadata:
      labels:
        app: nsqd
    spec:
      containers:
      - name: nsqd
        image: nsqio/nsq
        env:
        - name: NSQLOOKUP_ADDRESS
          value: nsqlookup.default.svc.cluster.local
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command: ["/nsqd"]
        args: ["--lookupd-tcp-address=$(NSQLOOKUP_ADDRESS):4160", "--broadcast-address=$(HOSTNAME).nsqd-srv"]
        ports:
        - containerPort: 4150
          hostPort: 4150
        - containerPort: 4151
          hostPort: 4151
---
apiVersion: v1
kind: Secret
metadata:
  name: kube-face-secret
type: Opaque
data:
  mysql_userpassword: cm9vdDpwYXNzd29yZDEyMw==
  mysql_password: cGFzc3dvcmQxMjM=
